import {
  attr,
  diceAnimation,
  getNode,
  getNodes,
  insertLast,
  toggleClass,
} from './lib/index.js';

// [phase-1] 주사위 굴리기
// 1. dice animation 불러오기
// 2. 주사위 굴리기 버튼을 클릭하면 diceAnimation 실행 될 수 있도록
//       - 주사위 굴리기 버튼을 가져온다.
//       - 이벤트 핸들러를 연결한다.
//       - 애니메이션 코드를 작성한다.
// 3. 애니메이션 토글 제어
// 4. 클로저 + IIFE 를 사용한 변수 보호

// [phase-2] 레코드 리스트 control / view
// 1. 주사위가 멈추면 기록/초기화 버튼 활성화
//2.

// 배열 구조 분해 할당

//* 구조분해로 첫번째버튼 a, 두번째 b , 세번째 c..

const [startButton, recordButton, resetButton] = getNodes(
  '.buttonGroup > button'
);
const recordListWrapper = getNode('.recordListWrapper');

const handleRollingDice = ((e) => {
  //! toggle 만드는법  false 였던 것
  let isClicked = false;
  let stopAnimation;
  //* 클로저 함수에서 함수
  return () => {
    if (!isClicked) {
      stopAnimation = setInterval(diceAnimation, 100);
      recordButton.disabled = true;
      resetButton.disabled = true;

      //true
    } else {
      clearInterval(stopAnimation);
      recordButton.disabled = false;
      resetButton.disabled = false;
    }

    isClicked = !isClicked;
  };
})();

//회차 늘어날 수 있도록
//diceValue 들어갈 수 있도록
//total 값이 나올수 있도록
let count = 0;
let total = 0;

function createItem(value) {
  return /* html */ `
  <tr>
            <td>${++count}</td>
            <td>${diceValue}</td>
            <td>${(total += diceValue)}</td>
          </tr>
`;
}

function renderRecordItem() {
  recordListWrapper.hidden = false;

  //큐브의 data-dice
  const diceValue = +attr('#cube', 'data-dice');

  //뿌려줄 템플릿 만들기

  //하단에 요소 템플릿 만들어주기
  insertLast('.recordList tbody', createItem(diceValue));
}

function handleReset() {
  recordListWrapper.hidden = true;
  recordButton.disabled = true;
  resetButton.disabled = true;
}

startButton.addEventListener('click', handleRollingDice);
recordButton.addEventListener('click', handleRecord);
resetButton.addEventListener('click', handleReset);
